'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.setFormFields = exports.SET_FORM_FIELDS = exports.setFormField = exports.SET_FORM_FIELD = exports.initializeForm = exports.INITIALIZE_FORM = exports.deleteForm = exports.DELETE_FORM = undefined;

var _reducerMap;

exports.formicReducer = formicReducer;
exports.connectReduxState = connectReduxState;

var _immutable = require('immutable');

var _reactRedux = require('react-redux');

var _stateTypes = require('../data/stateTypes');

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

// --------------------------------------------------
// Action creators

var createAction = function createAction(type) {
  return function (payload) {
    return { type: type, payload: payload };
  };
};

var DELETE_FORM = exports.DELETE_FORM = 'formic.DELETE_FORM';
var _deleteForm2 = createAction(DELETE_FORM);

exports.deleteForm = _deleteForm2;
var INITIALIZE_FORM = exports.INITIALIZE_FORM = 'formic.INITIALIZE_FORM';
var _initializeForm2 = createAction(INITIALIZE_FORM);

exports.initializeForm = _initializeForm2;
var SET_FORM_FIELD = exports.SET_FORM_FIELD = 'formic.SET_FORM_FIELD';
var _setFormField2 = createAction(SET_FORM_FIELD);

exports.setFormField = _setFormField2;
var SET_FORM_FIELDS = exports.SET_FORM_FIELDS = 'formic.SET_FORM_FIELDS';
var setFormFields = exports.setFormFields = createAction(SET_FORM_FIELDS);

// --------------------------------------------------
// Reducer

var defaultState = (0, _stateTypes.Formic)({});

function _deleteForm() {
  var state = arguments.length <= 0 || arguments[0] === undefined ? defaultState : arguments[0];
  var _ref = arguments[1];
  var formName = _ref.payload.formName;

  return state.get('forms').delete(formName);
}

function _initializeForm() {
  var state = arguments.length <= 0 || arguments[0] === undefined ? defaultState : arguments[0];
  var _ref2 = arguments[1];
  var _ref2$payload = _ref2.payload;
  var form = _ref2$payload.form;
  var formName = _ref2$payload.formName;

  return state.setIn(['forms', formName], form);
}

function _setFormField() {
  var state = arguments.length <= 0 || arguments[0] === undefined ? defaultState : arguments[0];
  var _ref3 = arguments[1];
  var _ref3$payload = _ref3.payload;
  var formName = _ref3$payload.formName;
  var field = _ref3$payload.field;
  var fieldName = _ref3$payload.fieldName;
  var shouldReplace = _ref3$payload.shouldReplace;

  return shouldReplace ? state.setIn(['forms', formName, 'fields', fieldName], new _stateTypes.Field(field)) : state.setIn(['forms', formName, 'fields', fieldName], state.getIn(['forms', formName, 'fields', fieldName]).merge((0, _immutable.Map)(field)));
}

function _setFormFields() {
  var state = arguments.length <= 0 || arguments[0] === undefined ? defaultState : arguments[0];
  var _ref4 = arguments[1];
  var _ref4$payload = _ref4.payload;
  var formName = _ref4$payload.formName;
  var fields = _ref4$payload.fields;

  return state.setIn(['forms', formName, 'fields'], state.getIn(['forms', formName, 'fields']).mergeDeep((0, _immutable.fromJS)(fields)));
}

var reducerMap = (_reducerMap = {}, _defineProperty(_reducerMap, DELETE_FORM, _deleteForm), _defineProperty(_reducerMap, INITIALIZE_FORM, _initializeForm), _defineProperty(_reducerMap, SET_FORM_FIELD, _setFormField), _defineProperty(_reducerMap, SET_FORM_FIELDS, _setFormFields), _reducerMap);

function formicReducer() {
  var state = arguments.length <= 0 || arguments[0] === undefined ? defaultState : arguments[0];
  var action = arguments[1];

  var reducer = reducerMap[action.type];
  return reducer ? reducer(state, action) : state;
}

// --------------------------------------------------
// Connect wrapper

function connectReduxState(formicBranchAccessor, formName, clearOnUnmount) {
  return (0, _reactRedux.connect)(function (state) {
    return {
      formState: formicBranchAccessor(state).getIn(['forms', formName])
    };
  }, function (dispatch) {
    return {
      deleteForm: function deleteForm() {
        return dispatch(_deleteForm2({ formName: formName }));
      },
      initializeForm: function initializeForm(_ref5) {
        var form = _ref5.form;
        return dispatch(_initializeForm2({ form: form, formName: formName }));
      },
      setFormField: function setFormField(_ref6) {
        var field = _ref6.field;
        var fieldName = _ref6.fieldName;
        return dispatch(_setFormField2({ field: field, fieldName: fieldName, formName: formName }));
      },
      onUnmount: function onUnmount() {
        return clearOnUnmount ? dispatch(_deleteForm2({ formName: formName })) : function () {};
      }
    };
  });
}
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.connectLocalState = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var connectLocalState = exports.connectLocalState = function connectLocalState(FormComponent) {
  var LocalStatePersistenceWrapper = function (_Component) {
    _inherits(LocalStatePersistenceWrapper, _Component);

    function LocalStatePersistenceWrapper(props) {
      _classCallCheck(this, LocalStatePersistenceWrapper);

      var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(LocalStatePersistenceWrapper).call(this, props));

      _this.initializeForm = function (_ref) {
        var form = _ref.form;
        return _this.setState({ form: form });
      };

      _this.setFormField = function (_ref2) {
        var field = _ref2.field;
        var fieldName = _ref2.fieldName;
        var shouldReplace = _ref2.shouldReplace;

        _this.actionQueue.push({ field: field, fieldName: fieldName, shouldReplace: shouldReplace });
        _this.invalidateState();
      };

      _this.executeStateChanges = function () {
        if (_this.actionQueue.length > 0) {
          var newForm = _this.actionQueue.reduce(function (acc, _ref3) {
            var field = _ref3.field;
            var fieldName = _ref3.fieldName;
            var shouldReplace = _ref3.shouldReplace;
            return shouldReplace ? acc.setIn(['fields', fieldName], field) : acc.setIn(['fields', fieldName], acc.getIn(['fields', fieldName]).merge(field));
          }, _this.state.form);

          _this.actionQueue = [];
          _this.setState({ form: newForm });
        }
      };

      _this.getFormState = function () {
        return _this.state.form;
      };

      _this.actionQueue = [];
      _this.state = {};
      return _this;
    } // eslint-disable-line

    _createClass(LocalStatePersistenceWrapper, [{
      key: 'invalidateState',
      value: function invalidateState() {
        requestAnimationFrame(this.executeStateChanges);
      }
    }, {
      key: 'render',
      value: function render() {
        return _react2.default.createElement(FormComponent, _extends({}, this.props, {
          formState: this.getFormState(),
          initializeForm: this.initializeForm,
          setFormField: this.setFormField
        }));
      }
    }]);

    return LocalStatePersistenceWrapper;
  }(_react.Component);

  return LocalStatePersistenceWrapper;
};
{"version":3,"sources":["../../src/stateWrappers/reduxStateWrapper.spec.js"],"names":[],"mappings":";;AAAA;;;;AACA;;AACA;;;;AACA;;;;AAIA;;AACA;;AAQA;;;;AAXA,eAAK,GAAL;;AAaA,IAAM,aAAa,wBAAb;AACN,IAAM,iBAAiB,uBAAW;AAChC,SAAO,oBAAI;AACT,YAAQ,sBAAK;AACX,cAAQ,oBAAI;AACV,mBAAW,sBAAU;AACnB,sBAAY,IAAZ;AACA,iBAAO,QAAP;SAFS,CAAX;OADM,CAAR;KADM,CAAR;AAQA,YAAQ,sBAAK;AACX,cAAQ,oBAAI;AACV,qBAAa,sBAAU;AACrB,iBAAO,iBAAP;SADW,CAAb;OADM,CAAR;KADM,CAAR;GATK,CAAP;CADqB,CAAjB;;AAoBN,SAAS,yBAAT,EAAoC,YAAM;AACxC,WAAS,aAAT,EAAwB,YAAM;AAC5B,OAAG,gDAAH,EAAqD,YAAM;AACzD,UAAM,SAAS;AACb,4CADa;AAEb,iBAAS;AACP,oBAAU,QAAV;SADF;OAFI,CADmD;AAOzD,UAAM,WAAW,sCAAc,cAAd,EAA8B,MAA9B,CAAX,CAPmD;AAQzD,wBAAO,SAAS,KAAT,CAAe,CAAC,OAAD,EAAU,OAAO,OAAP,CAAe,QAAf,CAAzB,CAAP,EAA2D,EAA3D,CAA8D,KAA9D,CAAoE,OAAO,OAAP,CAAe,IAAf,CAApE,CARyD;KAAN,CAArD,CAD4B;GAAN,CAAxB,CADwC;;AAcxC,WAAS,iBAAT,EAA4B,YAAM;AAChC,OAAG,8CAAH,EAAmD,YAAM;AACvD,UAAM,SAAS;AACb,gDADa;AAEb,iBAAS;AACP,gBAAM,sBAAK;AACT,oBAAQ,oBAAI;AACV,yBAAW,uBAAM;AACf,uBAAO,QAAP;eADS,CAAX;aADM,CAAR;WADI,CAAN;AAOA,oBAAU,QAAV;SARF;OAFI,CADiD;AAcvD,UAAM,WAAW,sCAAc,UAAd,EAA0B,MAA1B,CAAX,CAdiD;AAevD,wBAAO,SAAS,KAAT,CAAe,CAAC,OAAD,EAAU,OAAO,OAAP,CAAe,QAAf,CAAzB,CAAP,EAA2D,EAA3D,CAA8D,KAA9D,CAAoE,OAAO,OAAP,CAAe,IAAf,CAApE,CAfuD;KAAN,CAAnD,CADgC;GAAN,CAA5B,CAdwC;;AAkCxC,WAAS,gBAAT,EAA2B,YAAM;AAC/B,OAAG,sBAAH,EAA2B,YAAM;AAC/B,UAAM,SAAS;AACb,+CADa;AAEb,iBAAS;AACP,oBAAU,QAAV;AACA,iBAAO;AACL,mBAAO,OAAP;WADF;AAGA,qBAAW,WAAX;AACA,yBAAe,IAAf;SANF;OAFI,CADyB;;AAa/B,UAAM,WAAW,sCAAc,cAAd,EAA8B,MAA9B,CAAX,CAbyB;AAc/B,UAAM,gBAAgB,eACnB,KADmB,CAElB,CAAC,OAAD,EAAU,QAAV,EAAoB,QAApB,EAA8B,WAA9B,EAA2C,OAA3C,CAFkB,EAGlB,OAAO,OAAP,CAAe,KAAf,CAAqB,KAArB,CAHkB,CAKnB,KALmB,CAMlB,CAAC,OAAD,EAAU,QAAV,EAAoB,QAApB,EAA8B,WAA9B,EAA2C,YAA3C,CANkB,EAOlB,KAPkB,CAAhB,CAdyB;AAuB/B,wBAAO,QAAP,EAAiB,EAAjB,CAAoB,IAApB,CAAyB,KAAzB,CAA+B,aAA/B,EAvB+B;KAAN,CAA3B,CAD+B;;AA2B/B,OAAG,yBAAH,EAA8B,YAAM;AAClC,UAAM,SAAS;AACb,+CADa;AAEb,iBAAS;AACP,oBAAU,QAAV;AACA,iBAAO;AACL,sBAAU,OAAV;WADF;AAGA,qBAAW,WAAX;AACA,yBAAe,KAAf;SANF;OAFI,CAD4B;;AAalC,UAAM,WAAW,sCAAc,cAAd,EAA8B,MAA9B,CAAX,CAb4B;AAclC,UAAM,gBAAgB,eAAe,KAAf,CACpB,CAAC,OAAD,EAAU,QAAV,EAAoB,QAApB,EAA8B,WAA9B,EAA2C,UAA3C,CADoB,EAEpB,OAAO,OAAP,CAAe,KAAf,CAAqB,QAArB,CAFI,CAd4B;;AAmBlC,wBAAO,QAAP,EAAiB,EAAjB,CAAoB,IAApB,CAAyB,KAAzB,CAA+B,aAA/B,EAnBkC;KAAN,CAA9B,CA3B+B;GAAN,CAA3B,CAlCwC;;AAoFxC,WAAS,iBAAT,EAA4B,YAAM;AAChC,OAAG,6CAAH,EAAkD,YAAM;AACtD,UAAM,SAAS;AACb,gDADa;AAEb,iBAAS;AACP,oBAAU,QAAV;AACA,kBAAQ;AACN,uBAAW;AACT,uCADS;aAAX;WADF;SAFF;OAFI,CADgD;;AAatD,UAAM,WAAW,sCAAc,cAAd,EAA8B,MAA9B,CAAX,CAbgD;AActD,UAAM,gBAAgB,eAAe,KAAf,CACpB,CAAC,OAAD,EAAU,QAAV,EAAoB,QAApB,EAA8B,WAA9B,EAA2C,UAA3C,CADoB,EAEpB,OAAO,OAAP,CAAe,MAAf,CAAsB,SAAtB,CAAgC,QAAhC,CAFI,CAdgD;AAkBtD,wBAAO,QAAP,EAAiB,EAAjB,CAAoB,IAApB,CAAyB,KAAzB,CAA+B,aAA/B,EAlBsD;KAAN,CAAlD,CADgC;;AAsBhC,OAAG,2CAAH,EAAgD,YAAM;AACpD,UAAM,SAAS;AACb,gDADa;AAEb,iBAAS;AACP,oBAAU,QAAV;AACA,kBAAQ;AACN,uBAAW;AACT,qBAAO,OAAP;aADF;WADF;SAFF;OAFI,CAD8C;;AAapD,UAAM,WAAW,sCAAc,cAAd,EAA8B,MAA9B,CAAX,CAb8C;AAcpD,UAAM,gBAAgB,eAAe,KAAf,CACpB,CAAC,OAAD,EAAU,QAAV,EAAoB,QAApB,EAA8B,WAA9B,EAA2C,OAA3C,CADoB,EAEpB,OAAO,OAAP,CAAe,MAAf,CAAsB,SAAtB,CAAgC,KAAhC,CAFI,CAd8C;AAkBpD,wBAAO,QAAP,EAAiB,EAAjB,CAAoB,IAApB,CAAyB,KAAzB,CAA+B,aAA/B,EAlBoD;KAAN,CAAhD,CAtBgC;GAAN,CAA5B,CApFwC;CAAN,CAApC","file":"reduxStateWrapper.spec.js","sourcesContent":["import chai, { expect } from 'chai';\nimport { Map } from 'immutable';\nimport chaiImmutable from 'chai-immutable';\nimport purdy from 'purdy';\n\nchai.use(chaiImmutable);\n\nimport { Field, Form, Formic } from '../data/stateTypes';\nimport {\n  DELETE_FORM,\n  INITIALIZE_FORM,\n  SET_FORM_FIELD,\n  SET_FORM_FIELDS,\n\n  formicReducer,\n} from './reduxStateWrapper';\nimport { INVALID, VALID } from '../constants/validity';\n\nconst stateEmpty = new Formic();\nconst statePopulated = new Formic({\n  forms: Map({\n    signUp: Form({\n      fields: Map({\n        firstName: new Field({\n          isRequired: true,\n          value: 'Anakin',\n        }),\n      }),\n    }),\n    search: Form({\n      fields: Map({\n        queryString: new Field({\n          value: 'new lightsabres',\n        }),\n      }),\n    }),\n  }),\n});\n\ndescribe('reduxPersistenceWrapper', () => {\n  describe('DELETE_FORM', () => {\n    it('should delete the form with the specified name', () => {\n      const action = {\n        type: DELETE_FORM,\n        payload: {\n          formName: 'signUp',\n        },\n      };\n      const newState = formicReducer(statePopulated, action);\n      expect(newState.getIn(['forms', action.payload.formName])).to.equal(action.payload.form);\n    });\n  });\n\n  describe('INITIALIZE_FORM', () => {\n    it('should create a form with the specified name', () => {\n      const action = {\n        type: INITIALIZE_FORM,\n        payload: {\n          form: Form({\n            fields: Map({\n              firstName: Field({\n                value: 'Anakin',\n              }),\n            }),\n          }),\n          formName: 'signUp',\n        },\n      };\n      const newState = formicReducer(stateEmpty, action);\n      expect(newState.getIn(['forms', action.payload.formName])).to.equal(action.payload.form);\n    });\n  });\n\n  describe('SET_FORM_FIELD', () => {\n    it('should replace field', () => {\n      const action = {\n        type: SET_FORM_FIELD,\n        payload: {\n          formName: 'signUp',\n          field: {\n            value: 'Darth',\n          },\n          fieldName: 'firstName',\n          shouldReplace: true,\n        },\n      };\n\n      const newState = formicReducer(statePopulated, action);\n      const expectedState = statePopulated\n        .setIn(\n          ['forms', 'signUp', 'fields', 'firstName', 'value'],\n          action.payload.field.value\n        )\n        .setIn(\n          ['forms', 'signUp', 'fields', 'firstName', 'isRequired'],\n          false\n        );\n      expect(newState).to.deep.equal(expectedState);\n    });\n\n    it('should merge into field', () => {\n      const action = {\n        type: SET_FORM_FIELD,\n        payload: {\n          formName: 'signUp',\n          field: {\n            validity: 'valid',\n          },\n          fieldName: 'firstName',\n          shouldReplace: false,\n        },\n      };\n\n      const newState = formicReducer(statePopulated, action);\n      const expectedState = statePopulated.setIn(\n        ['forms', 'signUp', 'fields', 'firstName', 'validity'],\n        action.payload.field.validity\n      );\n\n      expect(newState).to.deep.equal(expectedState);\n    });\n  });\n\n  describe('SET_FORM_FIELDS', () => {\n    it('should set previously undefined field value', () => {\n      const action = {\n        type: SET_FORM_FIELDS,\n        payload: {\n          formName: 'signUp',\n          fields: {\n            firstName: {\n              validity: VALID,\n            },\n          },\n        },\n      };\n\n      const newState = formicReducer(statePopulated, action);\n      const expectedState = statePopulated.setIn(\n        ['forms', 'signUp', 'fields', 'firstName', 'validity'],\n        action.payload.fields.firstName.validity\n      );\n      expect(newState).to.deep.equal(expectedState);\n    });\n\n    it('should set previously defined field value', () => {\n      const action = {\n        type: SET_FORM_FIELDS,\n        payload: {\n          formName: 'signUp',\n          fields: {\n            firstName: {\n              value: 'Darth',\n            },\n          },\n        },\n      };\n\n      const newState = formicReducer(statePopulated, action);\n      const expectedState = statePopulated.setIn(\n        ['forms', 'signUp', 'fields', 'firstName', 'value'],\n        action.payload.fields.firstName.value\n      );\n      expect(newState).to.deep.equal(expectedState);\n    });\n  });\n});\n"]}
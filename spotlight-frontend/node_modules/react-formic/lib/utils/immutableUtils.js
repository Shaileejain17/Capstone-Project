'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

exports.logImmutable = logImmutable;
exports.toJS = toJS;

var _immutable = require('immutable');

var _objectUtils = require('./objectUtils');

/**
 * console.log but with toJS being called on iterable/immutable objects
 */
function logImmutable() {
  for (var _len = arguments.length, rest = Array(_len), _key = 0; _key < _len; _key++) {
    rest[_key] = arguments[_key];
  }

  console.log.apply( // eslint-disable-line
  console, Array.from(rest).map(function (item) {
    return _immutable.Iterable.isIterable(item) ? item.toJS() : item;
  }) // eslint-disable-line
  );
}

/**
 * Converts objects of mixed mutability/immutability into mutable objects
 *
 * Example:
 * const action = {
 *   type: 'setField',
 *   payload: {
 *     fieldName: 'email'
 *     field: Map({
 *       value: 'darth@deathstar.',
 *       validity: 'INVALID',
 *     })
 *   }
 * }
 *
 * console.log(deepToJS(action))
 * // {
 * //   type: 'setField',
 * //   payload: {
 * //     fieldName: 'email'
 * //     field: {
 * //       value: 'darth@deathstar.',
 * //       validity: 'INVALID'
 * //     }
 * //   }
 * // }
 */
function toJS(node) {
  var output = void 0;
  if (_immutable.Iterable.isIterable(node)) {
    output = node.toJS();
  } else {
    switch (typeof node === 'undefined' ? 'undefined' : _typeof(node)) {
      case 'object':
        output = node === null ? null : (0, _objectUtils.mapObjectToObject)(node, function (childNode) {
          return toJS(childNode);
        });
        break;
      case 'array':
        output = node.map(function (childNode) {
          return toJS(childNode);
        });
        break;
      default:
        output = node;
    }
  }
  return output;
}
'use strict';

require('babel-polyfill');

var _chai = require('chai');

var _validity = require('../constants/validity');

var _validationUtils = require('./validationUtils');

describe('validationUtils', function () {
  describe('validate', function () {
    var validateMinLengthMessage = 'Too short';
    function validateMinLength(value) {
      return {
        validity: value && value.length > 1 ? _validity.VALID : _validity.INVALID,
        validityMessage: validateMinLengthMessage
      };
    }

    var validateMaxLengthMessage = 'Too long';
    function validateMaxLength(value) {
      return {
        validity: value && value.length < 3 ? _validity.VALID : _validity.INVALID,
        validityMessage: validateMaxLengthMessage
      };
    }

    var validators = [validateMinLength, validateMaxLength];

    it('should return invalid at validator index 0', function () {
      var _validate = (0, _validationUtils.validate)(validators, 'a');

      var validity = _validate.validity;
      var validityMessage = _validate.validityMessage;

      (0, _chai.expect)(validity).to.equal(_validity.INVALID);
      (0, _chai.expect)(validityMessage).to.equal(validateMinLengthMessage);
    });

    it('should return invalid at validator index 0 + n', function () {
      var _validate2 = (0, _validationUtils.validate)(validators, 'abcde');

      var validity = _validate2.validity;
      var validityMessage = _validate2.validityMessage;

      (0, _chai.expect)(validity).to.equal(_validity.INVALID);
      (0, _chai.expect)(validityMessage).to.equal(validateMaxLengthMessage);
    });

    it('should return valid', function () {
      var _validate3 = (0, _validationUtils.validate)(validators, 'ab');

      var validity = _validate3.validity;
      var validityMessage = _validate3.validityMessage;

      (0, _chai.expect)(validity).to.equal(_validity.VALID);
      (0, _chai.expect)(validityMessage).to.equal(undefined);
    });

    it('should return valid with no validators', function () {
      var _validate4 = (0, _validationUtils.validate)([], undefined);

      var validity = _validate4.validity;
      var validityMessage = _validate4.validityMessage;

      (0, _chai.expect)(validity).to.equal(_validity.VALID);
      (0, _chai.expect)(validityMessage).to.equal(undefined);
    });
  });
});
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.validate = validate;
exports.shouldDisplayValidity = shouldDisplayValidity;
exports.fieldIsInvalid = fieldIsInvalid;
exports.fieldIsPending = fieldIsPending;
exports.fieldIsValid = fieldIsValid;
exports.allRequiredFieldsAreValid = allRequiredFieldsAreValid;
exports.getFormValidity = getFormValidity;

var _validity = require('../constants/validity');

/**
 * Checks a value against multiple validators, returning either the first one to fail or an object
 * representing that the value is valid. Both the individual validators this method return objects
 * shaped as below:
 * {
 *   validity: VALID,
 * }
 * or
 * {
 *   validity: INVALID,
 *   validityMessage: 'Must be a valid email address',
 * }
 *
 * @param  {Array}  validators  A list of validators
 * @param  {*}      value       The value to be validated
 * @return {object} An object describing the validity
 */
function validate(validators, value) {
  var output = { validity: _validity.VALID };

  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = undefined;

  try {
    for (var _iterator = validators[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      var validator = _step.value;

      var _validator = validator(value);

      var validity = _validator.validity;
      var validityMessage = _validator.validityMessage;

      if (validity === _validity.INVALID) {
        output = { validity: validity, validityMessage: validityMessage };
        break;
      }
    }
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator.return) {
        _iterator.return();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }

  return output;
}

function shouldDisplayValidity(field) {
  return field.isDirty || field.value;
}

function fieldIsInvalid(field) {
  return field.validity === _validity.INVALID && shouldDisplayValidity(field);
}

function fieldIsPending(field) {
  return field.validity === _validity.PENDING && shouldDisplayValidity(field);
}

function fieldIsValid(field) {
  return field.validity === _validity.VALID && shouldDisplayValidity(field);
}

function allRequiredFieldsAreValid(fields) {
  return fields.every(function (field) {
    return !(field.isDirty && field.validity === _validity.INVALID) && (!field.isRequired || field.isRequired && field.validity === _validity.VALID);
  });
}

function getFormValidity(_ref) {
  var fields = _ref.fields;

  return allRequiredFieldsAreValid(fields) ? _validity.VALID : _validity.INVALID;
}
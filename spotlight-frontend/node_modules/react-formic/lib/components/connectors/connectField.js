'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.defaultMapFieldValuesToProps = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// The default implementation for mapping field values props.
var defaultMapFieldValuesToProps = exports.defaultMapFieldValuesToProps = function defaultMapFieldValuesToProps(field, onChange) {
  return { field: field, onChange: onChange };
};

var connectField = function connectField() {
  var mapFieldValuesToProps = arguments.length <= 0 || arguments[0] === undefined ? defaultMapFieldValuesToProps : arguments[0];
  return function (WrappedComponent) {
    var ConnectFieldWrapper = function ConnectFieldWrapper(props, _ref) {
      var getFormFieldState = _ref.getFormFieldState;
      var getFormFieldChangeHandler = _ref.getFormFieldChangeHandler;
      var fieldName = props.fieldName;


      var fieldState = getFormFieldState(fieldName);
      var changeHandler = getFormFieldChangeHandler(fieldName);

      // const { fieldName } = props;
      // if (!fieldName) {
      //   throw new Error('Formic inputs require prop "fieldName"');
      // }

      // if (!fieldState) {
      //   throw new Error(
      //     `Formic cannot find a corresponding field for input with fieldName "${fieldName}". `
      //     + 'Check that the config for this form has a field defined by that name'
      //   );
      // }

      return _react2.default.createElement(WrappedComponent, _extends({}, props, mapFieldValuesToProps(fieldState, changeHandler)));
    };

    ConnectFieldWrapper.contextTypes = {
      getFormFieldState: _react2.default.PropTypes.func.isRequired,
      getFormFieldChangeHandler: _react2.default.PropTypes.func.isRequired

    };

    ConnectFieldWrapper.propTypes = {
      fieldName: _react2.default.PropTypes.string.isRequired
    };

    return ConnectFieldWrapper;
  };
};

exports.default = connectField;
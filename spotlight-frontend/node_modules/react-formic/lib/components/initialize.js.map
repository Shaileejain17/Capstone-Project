{"version":3,"sources":["../../src/components/initialize.js"],"names":[],"mappings":"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","file":"initialize.js","sourcesContent":["import React from 'react';\nimport { Map } from 'immutable';\nimport { Subject } from 'rx';\n\nimport { INVALID } from '../constants/validity';\nimport { mapObjectToObject, forEachPropertyOfObject } from '../utils/objectUtils';\nimport {\n  Field,\n  Form,\n} from '../data/stateTypes';\n\nfunction cleanValidationOutput({ validity, validityMessage }) {\n  return {\n    validity,\n    validityMessage: validity === INVALID ? validityMessage : null,\n  };\n}\n\nfunction createTriggerFieldMap(fields) {\n  return Object.keys(fields)\n    .filter(fieldName => fields[fieldName].triggerFields)\n    .reduce((acc, fieldName) => {\n      fields[fieldName].triggerFields.forEach(triggerFieldName => {\n        acc[triggerFieldName].push(fieldName);\n      });\n      return acc;\n    }, mapObjectToObject(fields, () => []));\n}\n\nfunction createFieldValidationChangeHandlers(configFields, getFormState) {\n  return mapObjectToObject(configFields, field => {\n    // let output;\n\n    // if (field.validationStream) {\n    //   const subject = new Subject();\n    //   const validationStream = field.validationStream(subject, getFormState);\n    //   output = {\n    //     validationStream,\n    //     onChange: value => subject.onNext(value),\n    //   };\n    // } else {\n    //   output = null;\n    // }\n\n\n    const subject = new Subject();\n    // const validationStream = field.validationStream(subject, getFormState);\n    const output = {\n      validationStream: field.validationStream\n        ? field.validationStream(subject, getFormState)\n        : null,\n      onChange: value => subject.onNext(value),\n    };\n\n\n    return output;\n  });\n}\n\nfunction createFieldValueChangeHandlers(fields) {\n  return mapObjectToObject(fields, field => {\n    const subject = new Subject();\n    return {\n      valueStream: field.valueStream\n        ? field.valueStream(subject)\n        : subject,\n      onChange: value => subject.onNext(value),\n    };\n  });\n}\n\nfunction triggerRelatedFields(\n  relatedFields, fieldValidationChangeHandlers, formState, setFormField\n) {\n  // Trigger other fields that need to know when this one changes\n  relatedFields.forEach(fieldNameToTrigger => {\n    // Set the field to dirty if it isn't already\n    const fieldToTrigger = formState.getIn(['fields', fieldNameToTrigger]);\n    if (!fieldNameToTrigger.isDirty) {\n      setFormField({ fieldName: fieldNameToTrigger, field: { isDirty: true } });\n    }\n\n    // Trigger the field to revalidate with its current value\n    fieldValidationChangeHandlers[fieldNameToTrigger].onChange(fieldToTrigger.value);\n  });\n}\n\nfunction createEmptyForm(fields) {\n  return new Form({ fields: Map(mapObjectToObject(fields, () => Field())) });\n}\n\nfunction getFieldsWithValueDiff(formState1, formState2) {\n  return formState2.fields.reduce((acc, field, fieldName) =>\n    !formState1 || field.value !== formState1.fields.get(fieldName).value\n      ? acc.set(fieldName, field)\n      : acc\n  , Map({}));\n}\n\n// --------------------------------------------------\n\nfunction defaultMapFormToProps(formState) {\n  return { form: formState };\n}\n\nfunction initialize(config, mapFormToProps = defaultMapFormToProps) {\n  return ComponentToWrap => {\n    class WrapperComponent extends React.Component {\n\n      static propTypes = {\n        formState: React.PropTypes.object,\n        initializeForm: React.PropTypes.func.isRequired,\n        onUnmount: React.PropTypes.func,\n        setFormField: React.PropTypes.func.isRequired,\n      };\n\n      static childContextTypes = {\n        getFormFieldState: React.PropTypes.func,\n        getFormFieldChangeHandler: React.PropTypes.func,\n        getFormState: React.PropTypes.func,\n      }\n\n      getChildContext() {\n        return {\n          getFormFieldState: this.getFormFieldState,\n          getFormFieldChangeHandler: this.getFormFieldChangeHandler,\n          getFormState: this.getFormState,\n        };\n      }\n\n      componentWillMount() {\n        const { formState, setFormField, initializeForm } = this.props;\n        const { fields, name } = config;\n\n        this.fieldValueChangeHandlers = createFieldValueChangeHandlers(fields);\n        this.fieldValidationChangeHandlers = createFieldValidationChangeHandlers(\n          fields, this.getFormState\n        );\n        this.triggerFieldMap = createTriggerFieldMap(fields);\n\n        // Only create an empty formState if one doesn't already exist. State can persist after a\n        // form unmounts if the reduxStateWrapper is being used.\n        if (!formState) {\n          initializeForm({ form: createEmptyForm(fields), formName: name });\n        }\n\n        // Create and register streams\n        this.streams = [];\n\n        // Set isRequired values on fields\n        forEachPropertyOfObject(config.fields, ({ isRequired }, fieldName) => {\n          setFormField({\n            field: { isRequired },\n            fieldName,\n          });\n        });\n\n        forEachPropertyOfObject(this.fieldValueChangeHandlers, ({ valueStream }, fieldName) => {\n          this.registerStream(\n            valueStream.subscribe(value => setFormField({\n              field: { value, isDirty: true },\n              fieldName,\n            }))\n          );\n        });\n\n        forEachPropertyOfObject(this.fieldValidationChangeHandlers, (validationChangeHandler, fieldName) => { // eslint-disable-line\n          // console.log('validationChangeHandler: ', validationChangeHandler);\n          if (validationChangeHandler.validationStream) {\n            this.registerStream(\n              validationChangeHandler.validationStream.subscribe(\n                value => setFormField({\n                  field: cleanValidationOutput(value),\n                  fieldName,\n                })\n              )\n            );\n          }\n        });\n\n\n      }\n\n      componentWillReceiveProps(nextProps) {\n        // TODO Move this out into utility function\n        getFieldsWithValueDiff(this.props.formState, nextProps.formState)\n        .filter(field => field.isDirty)\n        .forEach(({ value }, fieldName) => {\n          this.fieldValidationChangeHandlers[fieldName].onChange(value);\n\n          triggerRelatedFields(\n            this.triggerFieldMap[fieldName],\n            this.fieldValidationChangeHandlers,\n            nextProps.formState,\n            this.props.setFormField\n          );\n        });\n      }\n\n      componentWillUnmount() {\n        if (this.props.onUnmount) {\n          this.props.onUnmount();\n        }\n        this.disposeStreams();\n      }\n\n      getFormFieldState = fieldName => this.props.formState.getIn(['fields', fieldName])\n\n      getFormFieldChangeHandler = fieldName => this.fieldValueChangeHandlers[fieldName].onChange\n\n      getFormState = () => this.props.formState\n\n      registerStream(stream) {\n        this.streams.push(stream);\n      }\n\n      disposeStreams() {\n        this.streams.forEach(stream => stream.dispose());\n      }\n\n      render() {\n        const { formState } = this.props;\n\n        // The first render happens before initialization has time to complete so only render\n        // contents afterwards to avoid lots of conditional checking for state in sub components\n        return formState\n          ? <ComponentToWrap {...mapFormToProps(formState)} />\n          : null;\n      }\n    }\n\n    return config.stateWrapper(WrapperComponent);\n  };\n}\n\nexport default initialize;\n"]}
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _validityColorMap;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _connectForm = require('../connectors/connectForm');

var _connectForm2 = _interopRequireDefault(_connectForm);

var _validationUtils = require('../../utils/validationUtils');

var _validity = require('../../constants/validity');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var componentStyle = {
  'max-width': '400px'
};

var tableStyle = {
  backgroundColor: '#EFEFEF'
};

var standardPadding = {
  paddingLeft: '10px',
  paddingRight: '10px',
  paddingTop: '5px',
  paddingBottom: '5px'
};

var titleStyle = _extends({}, standardPadding, {
  backgroundColor: '#BBB',
  fontWeight: 'bold'
});

var cellStyle = _extends({}, standardPadding, {
  fontSize: '12px'
});

var fieldTitleCellStyle = _extends({}, cellStyle, {
  fontWeight: 'bold',
  backgroundColor: '#DDD'
});

var valueCellStyle = _extends({}, cellStyle, {
  borderBottom: 'solid 1px #DDD'
});

var propertyNameCellStyle = _extends({}, cellStyle, {
  borderBottom: 'solid 1px #DDD'
});

var propertyNames = ['isRequired', 'validity', 'validityMessage', 'value'].sort();

function cleanValue(value) {
  var output = void 0;

  if (value) {
    if (value === true) {
      output = 'true';
    } else if (typeof value === 'string') {
      output = '"' + value + '"';
    } else {
      output = value;
    }
  } else if (value === false) {
    output = 'false';
  } else if (value === undefined) {
    output = 'undefined';
  } else if (value === null) {
    output = 'null';
  }

  return output;
}

var validityColorMap = (_validityColorMap = {}, _defineProperty(_validityColorMap, _validity.VALID, '#00FF00'), _defineProperty(_validityColorMap, _validity.INVALID, '#FF0000'), _defineProperty(_validityColorMap, _validity.PENDING, 'yellow'), _validityColorMap);

var Visualizer = function Visualizer(_ref) {
  var form = _ref.form;
  var style = _ref.style;
  return _react2.default.createElement(
    'div',
    { style: _extends({}, componentStyle, style) },
    _react2.default.createElement(
      'table',
      { style: tableStyle },
      _react2.default.createElement(
        'thead',
        null,
        _react2.default.createElement(
          'tr',
          null,
          _react2.default.createElement(
            'td',
            {
              colSpan: '2',
              style: _extends({}, titleStyle, {
                backgroundColor: validityColorMap[(0, _validationUtils.getFormValidity)(form)]
              })
            },
            'Visualizer'
          )
        )
      ),
      _react2.default.createElement(
        'tbody',
        null,
        form.fields.entrySeq().sort(function (_ref2, _ref3) {
          var _ref5 = _slicedToArray(_ref2, 1);

          var a = _ref5[0];

          var _ref4 = _slicedToArray(_ref3, 1);

          var b = _ref4[0];
          return a > b;
        }).reduce(function (acc, _ref6) {
          var _ref7 = _slicedToArray(_ref6, 2);

          var fieldName = _ref7[0];
          var field = _ref7[1];

          return acc.concat([_react2.default.createElement(
            'tr',
            { key: fieldName },
            _react2.default.createElement(
              'td',
              { colSpan: '2', style: fieldTitleCellStyle },
              _react2.default.createElement(
                'strong',
                null,
                fieldName
              )
            )
          )]).concat(propertyNames
          // .filter(key => field[key] !== undefined)
          .map(function (key) {
            return _react2.default.createElement(
              'tr',
              { key: fieldName + '-' + key },
              _react2.default.createElement(
                'td',
                { style: propertyNameCellStyle },
                key
              ),
              _react2.default.createElement(
                'td',
                { style: _extends({}, valueCellStyle, {
                    backgroundColor: key === 'validity' ? validityColorMap[field[key]] : 'none'
                  })
                },
                cleanValue(field[key])
              )
            );
          }));
        }, [])
      )
    )
  );
};

Visualizer.propTypes = {
  form: _react2.default.PropTypes.object,
  style: _react2.default.PropTypes.object
};

exports.default = (0, _connectForm2.default)(function (form) {
  return { form: form };
})(Visualizer);